-var TITLE = "Case study - Tree Lines"
-var DESCRIPTION = "Case study - Tree Lines"
-var TYPE = "website"
-var URL = ""
-var FB_IMG = "./facebook.jpg"

doctype html
html(lang="en")
	head
		meta(http-equiv="Content-Type", content="text/html; charset=utf-8")
		meta(name="viewport", content="initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, width=device-width, minimal-ui")
		meta(name="apple-mobile-web-app-capable" content="yes")
		meta(name="apple-mobile-web-app-status-bar-style" content="black")

		//- facebook meta
		meta(property="og:site_name", content=TITLE)
		meta(property="og:title", content=TITLE)
		meta(property="og:description", content=DESCRIPTION)
		meta(property="og:type", content=TYPE)
		meta(property="og:url", content=URL)
		meta(property="og:image", content=FB_IMG)

		title !{TITLE}
		// build:css css/main.css
		link(href='https://fonts.googleapis.com/css?family=Open+Sans:300,400', rel='stylesheet', type='text/css')
		link(rel='stylesheet', href='css/main.css')
		// endbuild

	body
		#caseStudy
			.slide
				h1 Case study TREE LINE
				.by <a href='https://twitter.com/makio64' target='_blank'>By David Ronai @makio64 - 12.01.2016</a>
			.show
			.slide
				h2 Inspiration
				p I recently start living in Japan and illumination for winter are beautiful here. Everywhere you go, you can only be enchanted by it and after I finished my first christmasxp <a href='http://christmasexperiments.com/xps/06/journey/' target='_blank'>"Journey"</a> I wanted to make my own digital version of illuminated tree.
			.slide
				h2 Work organisation 
				p After sketching my idea on paper I cut the work in fews simple points :
				ul
					li I. Create the particle ground
					li II. Create simple shape with line
					li III. Add particles on the line
					li IV. Improving the shape
					li V. Making it move
					li VI. Add interaction & Optimize	
				p Below some screenshots taken during the creation process
				p
					img(src='img/01.jpg')
					img(src='img/02.jpg')
					img(src='img/03.jpg')
					img(src='img/04.jpg')
					img(src='img/05.jpg')
					img(src='img/06.jpg')
					img(src='img/07.jpg')
					img(src='img/08.jpg')
			.slide.ground
				h2 The ground
				p I wanted to use Particle to represent the ground. For performance issue everything is directly managed in the vertex shader and each particle has 3 attributes: with vector direction given by 2 angles: Phi & Theta.
				pre
					code.glsl.
						float t = (time+aTime)/100.;
						float theta = aAngle.y + aTime;
						float phi = aAngle.x + sin(aSpeed*t)*.5;
						pos.x = aAngle.z * sin( phi ) * cos( theta ) * radius;
						pos.z = aAngle.z * sin( phi ) * sin( theta ) * radius;
						pos.y = smoothstep(0., dist, distance(pos,vec3(0.))) * height;
				.slider#groundDistance dist
				.slider#groundHeight height
				.slider#groundRadius radius
			.show
			.slide.line
				h2 Create the shape with line
				p A line is made of points connected togethers and there is many ways to create interesting shape. I was thinking about 3d bezier line but I tested a more simple approach with vector direction give by 2 angles: Phi & Theta. 
				p By adding an epsilon phi / theta to the previous vector, move in this direction & repeat it X times I get interesting shape, close from my sketch, so I keep it.
				pre
					code.javascript.
						function createShape(epsilonTheta,epsilonPhi,radius) {

							var steps = 150
							var positions = new Float32Array( steps*3 )
							var z = 0, x = 0, y = .5, phi = 0, theta = Math.PI*2*Math.random()

							for(j=0; j < steps*3; j+=3){
								positions[ j ] = x
								positions[ j + 1 ] = y
								positions[ j + 2 ] = z
								
								x += radius * Math.sin( phi ) * Math.cos( theta )
								y += radius * Math.cos( phi )
								z += radius * Math.sin( phi ) * Math.sin( theta )
								phi += epsilonPhi
								theta += epsilonTheta
							}
							return positions
						}
				p To represent the line I used <a href='https://github.com/spite/THREE.MeshLine' target='_blank'>MeshLine</a> from <a href='https://twitter.com/thespite' target='_blank'>@thespite</a> and I'm globally very satisphied even if animation part was tricky as we will see after. The basic idea was to create the different branch and making change a bit the parameters from one to another, try it!
				.slider#epsilonPhi epsilon phi
				.slider#epsilonTheta epsilon theta
				.slider#shapeRadius radius
				.slider#lineWidth lineWidth
			.show
			.slide
				h2 Animate the line
				p Then I wanted to animate the line, but I got performance issues. I realized it came from the process function of MeshLine witch update all the attributes & recreate the buffer, even optimized/modified to reuse the same buffer & update only prev/next/position attributes it was still too heavy, especially on mobile. So instead of changing the attribute I modified the MeshLineMaterial Shader,added a uniform time & used the width variable as a time offset and not directly as a width. 
				p I also played with smoothstep & uv to reduce the width at the start & end of the line.
				pre
					code.glsl.
						//- w is the width
						float w = 1.8 * pixelWidth * lineWidth * sin(width+time)*(1.-smoothstep(.9,1.,uv.x*1.));
						w *= smoothstep(uv.x*2.,uv.y*2.+2.,-time*2000.);
				p & the width is given by this formula :
				pre
					code.javascript.
						line.setGeometry( geometry,function(p){ return p*division })
				.slider#deltaSpeed deltaSpeed
				.slider#division division
			.show
			.slide
				h2 Making the particles on the tree
				p My next step was to add particles on the three, I push particles on it by getting a random position on the line using linear interpolation & adding positionOffset to particles.
				.toogleButton#particleOnly Show particle only
				p Well.. Again make it move was much more tricky :D
				p I couldn’t set their position anymore with javascript for performance issue, so I did it in the vertex shader by passing the line path ( the array of points composing the line ) as a uniform and a aTime as attribute on each particle. The problem I encountered is the limit of the number of uniforms in a vertex shader ( apparently 512 ). To avoid it I simplify the line path by using less points.
				p The exact number of point use was set in javascript and add dynamically as uniforms at the start of my shader. Its now between 100 to 200points.
				pre
					code.glsl.
						float t = (time+aTime*50.)/80.;
						float i = mod(t, pathLength)+1.;
						float percent = i/pathLength;
						float extra = mod(i,1.);

						//- current index on path
						int ii = int(floor(i));

						//- linear interpolation with the previous point on path
						pos = (1.-extra)*path[ii-1] + extra*path[ii];

						//- reduce the offset position on the end so it converge to the same point ( but still 40% different )
						pos += aOffset*(1.4-smoothstep(0.9, 1., percent));

				p Made the particle disappear smoothly at the end
				pre
					code.glsl.
						alpha *= 1.-smoothstep(0.98, 1., percent);
			.slide
				h2 Appear/Disapear/Optimization
				p To made it appear / disappear like its coming from the ground, I play with the alpha and add a “hide” variable to control it. Also I inverse & accelerate the delta time when it should hide so it feel the line are coming back. Finally I make the branch coming one by one every 50ms so its softer than all appear together and also more interesting.
				.toogleButton#makeNew Anim in/out		
				p Optimization : In addition to the previous optimization I removed all depth test, used <a href='https://github.com/Makio64/treeline_casestudy/blob/master/src/coffee/makio/core/ObjectPool.coffee' target='_blank'>objects pool</a> & reduced the number of particles/line/points on mobile.
			.show
			.slide.conclusion
				h2 Conclusion
				p
					img(src='img/09.jpg')
					img(src='img/10.jpg')
					img(src='img/11.jpg')
					img(src='img/13.jpg')
				p I'm happy with the visual result of this experiment & I have fun experimenting with Meshline. 
				p In a technical point of view I learn the uniform limit, particle animation along a path and how to optimize meshline for repeatable movement. This last point is not super friendly but the change is worth it.
				p Some link if you wish to learn more about MeshLine & Shaders:
					ul
						li -<a href='/another'>Another case study</a> of advanced experiments using MeshLine by <a href='http://github.com/florianzumbrunn/' target='_blank'>@Floz</a>
						li -<a href='https://github.com/Makio64/treeline_casestudy' target='_blank'>The source code of this case study</a> ( coffeescript )
						li -Musical experiment using MeshLine: <a href='http://makiopolis.com/everyday/026/' target='_blank'>Baby</a> / <a href='http://makiopolis.com/everyday/025/' target='_blank'>Happy monday</a>
						li -<a href='https://github.com/spite/THREE.MeshLine' target='_blank'>The MeshLine repository</a>
				p.thanks Thank you for reading, if you like it, what about share it & stay tune on <a href='https://twitter.com/makio64' target='_blank'>twitter</a> ?
			.show
			.slide
				h2.fin Have fun & Experiment!

		script(type='text/javascript', src='js/bundle.js')

		
